name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10']
        include:
          # Add specific configurations for different platforms
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for setuptools_scm
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Get Python version info
      run: |
        python --version
        python -m pip --version
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[testing]"
        pip install setuptools_scm
    
    - name: Get version
      run: |
        python -c "from setuptools_scm import get_version; print(f'Version: {get_version()}')"
    
    - name: Run tests
      run: |
        pytest -v --tb=short
    
    - name: Run performance tests (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pytest -v --tb=short -m performance
    
    - name: Test CLI functionality
      run: |
        python -m split_python4gpt --help
        python -c "import split_python4gpt; print('Import successful')"
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test-results/
          .pytest_cache/
        retention-days: 30

  build-packages:
    name: Build Python packages
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools_scm
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload packages
      uses: actions/upload-artifact@v3
      with:
        name: python-packages
        path: dist/
        retention-days: 30

  build-binaries:
    name: Build binary for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            binary_name: mdsplit4gpt
          - os: windows-latest
            platform: windows
            binary_name: mdsplit4gpt.exe
          - os: macos-latest
            platform: macos
            binary_name: mdsplit4gpt
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pyinstaller setuptools_scm
    
    - name: Get version
      id: version
      run: |
        VERSION=$(python -c "from setuptools_scm import get_version; print(get_version())")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Build binary
      run: |
        pyinstaller --onefile --name ${{ matrix.binary_name }} --distpath dist-binary src/split_python4gpt/__main__.py
    
    - name: Test binary (Unix)
      if: matrix.platform != 'windows'
      run: |
        ./dist-binary/${{ matrix.binary_name }} --help
    
    - name: Test binary (Windows)
      if: matrix.platform == 'windows'
      run: |
        .\dist-binary\${{ matrix.binary_name }} --help
    
    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: binary-${{ matrix.platform }}
        path: dist-binary/${{ matrix.binary_name }}
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build-packages, build-binaries]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools_scm
    
    - name: Get version and tag info
      id: version
      run: |
        VERSION=$(python -c "from setuptools_scm import get_version; print(get_version())")
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        echo "Tag: $TAG_VERSION"
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy Python packages
        cp python-packages/* release-assets/
        
        # Copy and rename binaries
        cp binary-linux/mdsplit4gpt release-assets/mdsplit4gpt-linux-x86_64
        cp binary-windows/mdsplit4gpt.exe release-assets/mdsplit4gpt-windows-x86_64.exe
        cp binary-macos/mdsplit4gpt release-assets/mdsplit4gpt-macos-x86_64
        
        # Make binaries executable
        chmod +x release-assets/mdsplit4gpt-*
        
        # List all assets
        ls -la release-assets/
    
    - name: Generate release notes
      id: release_notes
      run: |
        echo "## Release Notes for ${{ steps.version.outputs.tag_version }}" > release_notes.md
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "**Python Package:**" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "pip install split-python4gpt==${{ steps.version.outputs.tag_version }}" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "**Binary Downloads:**" >> release_notes.md
        echo "- Linux: \`mdsplit4gpt-linux-x86_64\`" >> release_notes.md
        echo "- Windows: \`mdsplit4gpt-windows-x86_64.exe\`" >> release_notes.md
        echo "- macOS: \`mdsplit4gpt-macos-x86_64\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Changes" >> release_notes.md
        
        # Get changes since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "Changes since $LAST_TAG:" >> release_notes.md
          git log --oneline $LAST_TAG..HEAD --pretty=format:"- %s" >> release_notes.md
        else
          echo "Initial release" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### Technical Details" >> release_notes.md
        echo "- Python version: 3.10" >> release_notes.md
        echo "- Package version: ${{ steps.version.outputs.version }}" >> release_notes.md
        echo "- Git commit: ${{ github.sha }}" >> release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.version.outputs.tag_version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
        packages_dir: release-assets/
        skip_existing: true

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pydoc-markdown
    
    - name: Generate API documentation
      run: |
        pydoc-markdown > API.md
    
    - name: Commit and push documentation
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: 'docs: Update API documentation [skip ci]'
        file_pattern: 'API.md'
        commit_user_name: 'github-actions[bot]'
        commit_user_email: 'github-actions[bot]@users.noreply.github.com'