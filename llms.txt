This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  workflows/
    ci.yml
src/
  split_python4gpt/
    __init__.py
    __main__.py
    minifier.py
tests/
  data/
    in_test.py
    out_test.py
  conftest.py
  test_minifier.py
.coveragerc
.gitignore
.isort.cfg
.pre-commit-config.yaml
API.md
AUTHORS.md
LICENSE.txt
pydoc-markdown.yml
pyproject.toml
README.md
setup.cfg
setup.py
tox.ini
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/workflows/ci.yml">
name: Test, Build, and Publish

on:
  push:
    branches: [main]
    tags: ['v[0-9]*', '[0-9]+.[0-9]+*']
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1,16 * *'

permissions:
  contents: write

concurrency:
  group: >-
    ${{ github.workflow }}-${{ github.ref_type }}- ${{ github.event.pull_request.number || github.sha }}


  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -e .
      - name: Run tests
        run: pytest

  update-docs:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install pydoc-markdown
        run: pip install pydoc-markdown
      - name: Generate API documentation
        run: pydoc-markdown > API.md
      - name: Commit and push if it's changed
        uses: EndBug/add-and-commit@v9
        with:
          message: 'Update API documentation'
          add: 'API.md'

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build distribution
        run: python -m build
      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
</file>

<file path="src/split_python4gpt/__init__.py">
import sys
from .minifier import PyTypingMinifier

if sys.version_info[:2] >= (3, 8):
    # TODO: Import directly (no need for conditional) when `python_requires = >= 3.8`
    from importlib.metadata import PackageNotFoundError, version  # pragma: no cover
else:
    from importlib_metadata import PackageNotFoundError, version  # pragma: no cover

try:
    # Change here if project is renamed and does not equal the package name
    dist_name = __name__
    __version__ = version(dist_name)
except PackageNotFoundError:  # pragma: no cover
    __version__ = "unknown"
finally:
    del version, PackageNotFoundError
</file>

<file path="src/split_python4gpt/__main__.py">
#!/usr/bin/env python3
from pathlib import Path

import fire
from .minifier import PyTypingMinifier


def split_python4gpt(
    path_or_folder: str | Path,
    out: str | Path | None = None,
    pyis: str | Path | None = None,
    types: bool = True,
    mini: bool = True,
    mini_docs: bool = True,
    mini_globs: bool = False,
    mini_locs: bool = False,
    mini_lits: bool = True,
    mini_annotations: bool = True,
    mini_asserts: bool = True,
    mini_debug: bool = True,
    mini_imports: bool = True,
    mini_obj: bool = True,
    mini_pass: bool = True,
    mini_posargs: bool = True,
    mini_retnone: bool = True,
    mini_shebang: bool = True,
):
    """
    Minify Python scripts or projects and/or infer types in them.

    Args:
        path_or_folder (str | Path): Path to the input Python file or folder.
        out (str | Path | None, optional): Output folder for the processed files. Defaults to input folder.
        pyis (str | Path | None, optional): Directory for storing generated .pyi files. Defaults to the output folder.
        types (bool, optional): Infer types using PyType? Defaults to True.
        mini (bool, optional): Minify the Python scripts? Defaults to True.
        mini_docs (bool, optional): Remove docstrings? Defaults to True.
        mini_globs (bool, optional): Rename global names? Defaults to False.
        mini_locs (bool, optional): Rename local names? Defaults to False.
        mini_lits (bool, optional): Hoist literal statements? Defaults to True.
        mini_annotations (bool, optional): Remove annotations? Defaults to True.
        mini_asserts (bool, optional): Remove asserts? Defaults to True.
        mini_debug (bool, optional): Remove debugging statements? Defaults to True.
        mini_imports (bool, optional): Combine imports? Defaults to True.
        mini_obj (bool, optional): Remove object base? Defaults to True.
        mini_pass (bool, optional): Remove pass statements? Defaults to True.
        mini_posargs (bool, optional): Convert positional to keyword args? Defaults to True.
        mini_retnone (bool, optional): Remove explicit return None statements? Defaults to True.
        mini_shebang (bool, optional): Remove shebang? Defaults to True.

    Returns:
        list[Path]: List of output Python files.
    """
    return PyTypingMinifier().process_py(
        py_path_or_folder=path_or_folder,
        out_py_folder=out,
        pyi_folder=pyis,
        types=types,
        mini=mini,
        combine_imports=mini_imports,
        convert_posargs_to_args=mini_posargs,
        hoist_literals=mini_lits,
        preserve_shebang=not mini_shebang,
        remove_annotations=mini_annotations,
        remove_asserts=mini_asserts,
        remove_debug=mini_debug,
        remove_explicit_return_none=mini_retnone,
        remove_literal_statements=mini_docs,
        remove_object_base=mini_obj,
        remove_pass=mini_pass,
        rename_globals=mini_globs,
        rename_locals=mini_locs,
    )


def cli():
    fire.core.Display = lambda lines, out: print(*lines, file=out)
    fire.Fire(split_python4gpt)


if __name__ == "__main__":
    cli()
</file>

<file path="src/split_python4gpt/minifier.py">
#!/usr/bin/env python3.10

import contextlib
import shutil
import subprocess
from pathlib import Path

from python_minifier import minify
from pytype.tools.merge_pyi import merge_pyi


class PyTypingMinifier:
    def __init__(self, py_ver="3.10"):
        self.PY_TYPE_PY_VER = py_ver
        self.PY_TYPE_PY_EXE = shutil.which(f"python{self.PY_TYPE_PY_VER}")
        self.py_folder = None
        self.out_py_folder = None
        self.pyi_folder = None
        self.py_path = None
        self.out_py_path = None
        self.pyi_path = None
        self.py_code = None
        self.code_data = {
            "py_path": Path(),
            "pyi_path": Path(),
            "py_code": "",
        }
        self.code_folder_data = {}

    def init_folders(
        self,
        py_folder: str | Path,
        out_py_folder: str | Path | None = None,
        pyi_folder: str | Path | None = None,
    ):
        self.py_folder = Path(py_folder).resolve()
        self.out_py_folder = (
            Path(out_py_folder).resolve() if out_py_folder else self.py_folder
        )
        self.out_py_folder.mkdir(parents=True, exist_ok=True)
        self.pyi_folder = Path(pyi_folder) if pyi_folder else self.out_py_folder
        self.pyi_folder.mkdir(parents=True, exist_ok=True)

    def read_py_file(
        self,
        py_path: str | Path,
        out_py_folder: str | Path | None = None,
        pyi_folder: str | Path | None = None,
    ):
        py_path = Path(py_path).resolve()
        self.init_folders(py_path.parent, out_py_folder, pyi_folder)
        out_py_path, code_data = self.init_code_data(py_path)
        self.code_folder_data[out_py_path] = code_data

    def read_py_folder(
        self,
        py_folder: str | Path,
        out_py_folder: str | Path | None = None,
        pyi_folder: str | Path | None = None,
    ):
        self.init_folders(py_folder, out_py_folder, pyi_folder)
        for py_path in Path(self.py_folder).rglob("*.py"):
            out_py_path, code_data = self.init_code_data(py_path)
            self.code_folder_data[out_py_path] = code_data

    def init_code_data(
        self,
        py_path: str | Path,
    ):
        py_path = Path(py_path).resolve()
        rel_py_path = Path(py_path).relative_to(self.py_folder)
        out_py_path = Path(self.out_py_folder, rel_py_path)
        out_py_path.parent.mkdir(parents=True, exist_ok=True)
        if out_py_path != py_path:
            shutil.copy2(py_path, out_py_path)
        pyi_path = Path(
            self.pyi_folder, ".pytype", "pyi", out_py_path.with_suffix(".pyi").name
        )
        py_code = out_py_path.read_text()
        code_data = {
            "py_path": py_path,
            "pyi_path": pyi_path,
            "py_code": py_code,
        }
        return out_py_path, code_data

    def infer_types(
        self, py_path: str | Path, pyi_path: str | Path, py_code: str
    ) -> str:
        with contextlib.suppress(subprocess.CalledProcessError):
            command = [
                self.PY_TYPE_PY_EXE,
                "-m",
                "pytype",
                f"--python-version={self.PY_TYPE_PY_VER}",
                str(py_path),
            ]
            subprocess.run(command, cwd=self.pyi_folder, check=True)
            pyi_code = Path(pyi_path).read_text()
            py_code = merge_pyi.merge_sources(py=py_code, pyi=pyi_code)
        return py_code

    def minify(self, py_code: str, **custom_minify_options):
        minify_options = {
            "combine_imports": True,
            "convert_posargs_to_args": True,
            "hoist_literals": False,
            "preserve_shebang": False,
            "remove_annotations": False,
            "remove_asserts": True,
            "remove_debug": True,
            "remove_explicit_return_none": True,
            "remove_literal_statements": True,
            "remove_object_base": True,
            "remove_pass": True,
            "rename_globals": False,
            "rename_locals": False,
        } | custom_minify_options
        return minify(py_code, **minify_options)

    def process_py(
        self,
        py_path_or_folder: str | Path,
        out_py_folder: str | Path | None = None,
        pyi_folder: str | Path | None = None,
        types: bool = True,
        mini: bool = True,
        **minify_options,
    ) -> list[Path]:
        py_path_or_folder = Path(py_path_or_folder).resolve()
        if py_path_or_folder.is_dir():
            self.read_py_folder(py_path_or_folder, out_py_folder, pyi_folder)
        elif py_path_or_folder.is_file():
            self.read_py_file(py_path_or_folder, out_py_folder, pyi_folder)
        else:
            return []
        for out_py_path, code_data in self.code_folder_data.items():
            if types:
                py_code = self.infer_types(
                    out_py_path, code_data["pyi_path"], code_data["py_code"]
                )
            if mini:
                py_code = self.minify(py_code, **minify_options)
            code_data["py_code"] = py_code
            out_py_path.write_text(py_code)
        return list(self.code_folder_data.keys())
</file>

<file path="tests/data/in_test.py">
def hello_name(name):
    print(f"Hello, {name}!")
</file>

<file path="tests/data/out_test.py">
def hello_name(name):print(f"Hello, {name}!")
</file>

<file path="tests/conftest.py">
"""
    Dummy conftest.py for split_python4gpt.

    If you don't know what this is for, just leave it empty.
    Read more about conftest.py under:
    - https://docs.pytest.org/en/stable/fixture.html
    - https://docs.pytest.org/en/stable/writing_plugins.html
"""

# import pytest
</file>

<file path="tests/test_minifier.py">
import pytest
from split_python4gpt.minifier import PyTypingMinifier
from pathlib import Path


@pytest.fixture
def minifier():
    return PyTypingMinifier()


def test_minify_code(minifier):
    # Test if the minify method returns the expected result
    in_code = Path(Path(__file__).parent / "data" / "in_test.py").read_text()
    out_code = Path(Path(__file__).parent / "data" / "out_test.py").read_text()

    minified_code = minifier.minify(in_code)

    assert minified_code == out_code
</file>

<file path=".coveragerc">
# .coveragerc to control coverage.py
[run]
branch = True
source = split_python4gpt
# omit = bad_file.py

[paths]
source =
    src/
    */site-packages/

[report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
</file>

<file path=".gitignore">
# Temporary and binary files
*~
*.py[cod]
*.so
*.cfg
!.isort.cfg
!setup.cfg
*.orig
*.log
*.pot
__pycache__/*
.cache/*
.*.swp
*/.ipynb_checkpoints/*
.DS_Store

# Project files
.ropeproject
.project
.pydevproject
.settings
.idea
.vscode
tags

# Package files
*.egg
*.eggs/
.installed.cfg
*.egg-info

# Unittest and coverage
htmlcov/*
.coverage
.coverage.*
.tox
junit*.xml
coverage.xml
.pytest_cache/

# Build and docs folder/files
build/*
dist/*
sdist/*
docs/api/*
docs/_rst/*
docs/_build/*
cover/*
MANIFEST

# Per-project virtualenvs
.venv*/
.conda*/
.python-version
</file>

<file path=".isort.cfg">
[settings]
profile = black
known_first_party = split_python4gpt
</file>

<file path=".pre-commit-config.yaml">
exclude: '^docs/conf.py'

repos:
- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v4.4.0
  hooks:
  - id: trailing-whitespace
  - id: check-added-large-files
  - id: check-ast
  - id: check-json
  - id: check-merge-conflict
  - id: check-xml
  - id: check-yaml
  - id: debug-statements
  - id: end-of-file-fixer
  - id: requirements-txt-fixer
  - id: mixed-line-ending
    args: ['--fix=auto']  # replace 'auto' with 'lf' to enforce Linux/Mac line endings or 'crlf' for Windows

## If you want to automatically "modernize" your Python code:
# - repo: https://github.com/asottile/pyupgrade
#   rev: v3.3.1
#   hooks:
#   - id: pyupgrade
#     args: ['--py37-plus']

## If you want to avoid flake8 errors due to unused vars or imports:
# - repo: https://github.com/PyCQA/autoflake
#   rev: v2.0.2
#   hooks:
#   - id: autoflake
#     args: [
#       --in-place,
#       --remove-all-unused-imports,
#       --remove-unused-variables,
#     ]

- repo: https://github.com/PyCQA/isort
  rev: 5.11.5
  hooks:
  - id: isort

- repo: https://github.com/psf/black
  rev: stable
  hooks:
  - id: black
    language_version: python3

## If like to embrace black styles even in the docs:
# - repo: https://github.com/asottile/blacken-docs
#   rev: v1.13.0
#   hooks:
#   - id: blacken-docs
#     additional_dependencies: [black]

- repo: https://github.com/PyCQA/flake8
  rev: 5.0.4
  hooks:
  - id: flake8
  ## You can add flake8 plugins via `additional_dependencies`:
  #  additional_dependencies: [flake8-bugbear]

## Check for misspells in documentation files:
# - repo: https://github.com/codespell-project/codespell
#   rev: v2.2.4
#   hooks:
#   - id: codespell
</file>

<file path="API.md">
<a id="split_python4gpt"></a>

# split\_python4gpt

<a id="split_python4gpt.__main__"></a>

# split\_python4gpt.\_\_main\_\_

<a id="split_python4gpt.__main__.split_python4gpt"></a>

#### split\_python4gpt

```python
def split_python4gpt(path_or_folder: str | Path,
                     out: str | Path | None = None,
                     pyis: str | Path | None = None,
                     types: bool = True,
                     mini: bool = True,
                     mini_docs: bool = True,
                     mini_globs: bool = False,
                     mini_locs: bool = False,
                     mini_lits: bool = True,
                     mini_annotations: bool = True,
                     mini_asserts: bool = True,
                     mini_debug: bool = True,
                     mini_imports: bool = True,
                     mini_obj: bool = True,
                     mini_pass: bool = True,
                     mini_posargs: bool = True,
                     mini_retnone: bool = True,
                     mini_shebang: bool = True)
```

Minify Python scripts or projects and/or infer types in them.

Args:
    path_or_folder (str | Path): Path to the input Python file or folder.
    out (str | Path | None, optional): Output folder for the processed files. Defaults to input folder.
    pyis (str | Path | None, optional): Directory for storing generated .pyi files. Defaults to the output folder.
    types (bool, optional): Infer types using PyType? Defaults to True.
    mini (bool, optional): Minify the Python scripts? Defaults to True.
    mini_docs (bool, optional): Remove docstrings? Defaults to True.
    mini_globs (bool, optional): Rename global names? Defaults to False.
    mini_locs (bool, optional): Rename local names? Defaults to False.
    mini_lits (bool, optional): Hoist literal statements? Defaults to True.
    mini_annotations (bool, optional): Remove annotations? Defaults to True.
    mini_asserts (bool, optional): Remove asserts? Defaults to True.
    mini_debug (bool, optional): Remove debugging statements? Defaults to True.
    mini_imports (bool, optional): Combine imports? Defaults to True.
    mini_obj (bool, optional): Remove object base? Defaults to True.
    mini_pass (bool, optional): Remove pass statements? Defaults to True.
    mini_posargs (bool, optional): Convert positional to keyword args? Defaults to True.
    mini_retnone (bool, optional): Remove explicit return None statements? Defaults to True.
    mini_shebang (bool, optional): Remove shebang? Defaults to True.

Returns:
    list[Path]: List of output Python files.

<a id="split_python4gpt.minifier"></a>

# split\_python4gpt.minifier
</file>

<file path="AUTHORS.md">
# Contributors

- Adam Twardoch <adam+github@twardoch.com>
</file>

<file path="LICENSE.txt">
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "{}"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright {yyyy} {name of copyright owner}

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
</file>

<file path="pydoc-markdown.yml">
loaders:
  - type: python
processors:
  - type: filter
renderer:
  type: markdown
</file>

<file path="pyproject.toml">
[build-system]
# AVOID CHANGING REQUIRES: IT WILL BE UPDATED BY PYSCAFFOLD!
requires = ["setuptools>=46.1.0", "setuptools_scm[toml]>=5"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
# For smarter version schemes and other configuration options,
# check out https://github.com/pypa/setuptools_scm
version_scheme = "no-guess-dev"
</file>

<file path="README.md">
# split_python4gpt

`split_python4gpt` is a Python tool designed to reorganize large Python projects into minified files based on a specified token limit. This is particularly useful for processing large Python projects with GPT models, as it allows the models to handle the data in manageable chunks.

_**Version 1.0.3** (2023-06-22)_

### NOT IMPLEMENTED YET

Warning: The code does not yet implement the splitting or token counting, only type inference and minification. Use at your own risk.

## Installation

You can install `split_python4gpt` via pip:

```bash
pip install split_python4gpt
```

## CLI Usage

After installation, you can use the `pysplit4gpt` or `python3.10 -m split_python4gpt` command:

```
python3.10 -m split_python4gpt PATH_OR_FOLDER [FLAGS]

POSITIONAL ARGUMENTS
    PATH_OR_FOLDER
        Type: str | pathlib.Path
        Path to the input Python file or folder.

FLAGS
    -o, --out=OUT
        Type: Optional[str | pathlib...
        Default: None
        Output folder for the processed files. Defaults to input folder.
    -p, --pyis=PYIS
        Type: Optional[str | pathlib...
        Default: None
        Directory for storing generated .pyi files. Defaults to the output folder.
    -t, --types=TYPES
        Type: bool
        Default: True
        Infer types using PyType? Defaults to True.
    --mini=MINI
        Type: bool
        Default: True
        Minify the Python scripts? Defaults to True.
    --mini_docs=MINI_DOCS
        Type: bool
        Default: True
        Remove docstrings? Defaults to True.
    --mini_globs=MINI_GLOBS
        Type: bool
        Default: False
        Rename global names? Defaults to False.
    --mini_locs=MINI_LOCS
        Type: bool
        Default: False
        Rename local names? Defaults to False.
    --mini_lits=MINI_LITS
        Type: bool
        Default: True
        Hoist literal statements? Defaults to True.
    --mini_annotations=MINI_ANNOTATIONS
        Type: bool
        Default: True
        Remove annotations? Defaults to True.
    --mini_asserts=MINI_ASSERTS
        Type: bool
        Default: True
        Remove asserts? Defaults to True.
    --mini_debug=MINI_DEBUG
        Type: bool
        Default: True
        Remove debugging statements? Defaults to True.
    --mini_imports=MINI_IMPORTS
        Type: bool
        Default: True
        Combine imports? Defaults to True.
    --mini_obj=MINI_OBJ
        Type: bool
        Default: True
        Remove object base? Defaults to True.
    --mini_pass=MINI_PASS
        Type: bool
        Default: True
        Remove pass statements? Defaults to True.
    --mini_posargs=MINI_POSARGS
        Type: bool
        Default: True
        Convert positional to keyword args? Defaults to True.
    --mini_retnone=MINI_RETNONE
        Type: bool
        Default: True
        Remove explicit return None statements? Defaults to True.
    --mini_shebang=MINI_SHEBANG
        Type: bool
        Default: True
        Remove shebang? Defaults to True.
```

## Python usage

- **[See the API documentation](https://twardoch.github.io/split-python4gpt/API.html)** for more advanced usage

## Changelog

- v1.0.0: Initial release

## Contributing

Contributions to `split_python4gpt` are welcome! Please open an issue or submit a pull request on the [GitHub repository](https://github.com/twardoch/split-python4gpt).

## License

- Copyright (c) 2023 [Adam Twardoch](./AUTHORS.md)
- Written with assistance from ChatGPT
- Licensed under the [Apache License 2.0](./LICENSE.txt)<a id="split_python4gpt"></a>
</file>

<file path="setup.cfg">
[metadata]
name = split_python4gpt
description = Python tool designed to reorganize large Python projects into minified files based on a specified token limit. This is particularly useful for processing large Python projects with GPT models, as it allows the models to handle the data in manageable chunks.
author = Adam Twardoch
author_email = adam+github@twardoch.com
license = Apache-2.0
license_files = LICENSE.txt
long_description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8; variant=GFM
url = https://github.com/twardoch/split-python4gpt
project_urls =
    Documentation = https://twardoch.github.io/split-python4gpt/
    Source = https://github.com/twardoch/split-python4gpt
platforms = any
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.10
    Intended Audience :: Developers
    Intended Audience :: Science/Research
    Topic :: Text Processing
    License :: OSI Approved :: Apache Software License
    Operating System :: OS Independent
keywords = python, code-summarization, openai, text-summarization, summarization, code-processing, gpt, data-preprocessing, openai-gpt, gpt-3, gpt-4, gpt-35-turbo, gpt-35-turbo-16k

[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src
python_requires = >=3.10, <3.11
install_requires =
    fire>=0.5.0
    tiktoken>=0.4.0
    python-minifier>=2.9.0
    pytype>=2023.6.16

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
testing =
    setuptools
    pytest
    pytest-cov

[options.entry_points]
console_scripts =
    mdsplit4gpt = split_python4gpt.__main__:cli


[tool:pytest]
addopts =
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests

[devpi:upload]
no_vcs = 1
formats = bdist_wheel

[flake8]
max_line_length = 88
extend_ignore = E203, W503
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pyscaffold]
version = 4.4.1
package = split_python4gpt
extensions =
    github_actions
    markdown
    pre_commit
</file>

<file path="setup.py">
"""
    Setup file for split_python4gpt.
    Use setup.cfg to configure your project.

    This file was generated with PyScaffold 4.4.1.
    PyScaffold helps you to put up the scaffold of your new Python project.
    Learn more under: https://pyscaffold.org/
"""
from setuptools import setup

if __name__ == "__main__":
    try:
        setup(use_scm_version={"version_scheme": "no-guess-dev"})
    except:  # noqa
        print(
            "\n\nAn error occurred while building the project, "
            "please ensure you have the most updated version of setuptools, "
            "setuptools_scm and wheel with:\n"
            "   pip install -U setuptools setuptools_scm wheel\n\n"
        )
        raise
</file>

<file path="tox.ini">
# Tox configuration file
# Read more under https://tox.wiki/
# THIS SCRIPT IS SUPPOSED TO BE AN EXAMPLE. MODIFY IT ACCORDING TO YOUR NEEDS!

[tox]
minversion = 3.24
envlist = default
isolated_build = True


[testenv]
description = Invoke pytest to run automated tests
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*
extras =
    testing
commands =
    pytest {posargs}


# # To run `tox -e lint` you need to make sure you have a
# # `.pre-commit-config.yaml` file. See https://pre-commit.com
# [testenv:lint]
# description = Perform static analysis and style checks
# skip_install = True
# deps = pre-commit
# passenv =
#     HOMEPATH
#     PROGRAMDATA
#     SETUPTOOLS_*
# commands =
#     pre-commit run --all-files {posargs:--show-diff-on-failure}


[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
# https://setuptools.pypa.io/en/stable/build_meta.html#how-to-use-it
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
passenv =
    SETUPTOOLS_*
commands =
    clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    build: python -m build {posargs}
# By default, both `sdist` and `wheel` are built. If your sdist is too big or you don't want
# to make it available, consider running: `tox -e build -- --wheel`


[testenv:{docs,doctests,linkcheck}]
description =
    docs: Invoke sphinx-build to build the docs
    doctests: Invoke sphinx-build to run doctests
    linkcheck: Check for broken links in the documentation
passenv =
    SETUPTOOLS_*
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/_build
    docs: BUILD = html
    doctests: BUILD = doctest
    linkcheck: BUILD = linkcheck
deps =
    -r {toxinidir}/docs/requirements.txt
    # ^  requirements.txt shared with Read The Docs
commands =
    sphinx-build --color -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}


[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    # See: https://twine.readthedocs.io/en/latest/
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
    TWINE_REPOSITORY_URL
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
</file>

</files>
